-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)



--types of values:
--Value(int)
--Refer(string)
--Void

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun myPrint(s) {
  skip
}

fun eval (c, expr) {
  case expr of
    
    Binop(s, e1, e2) -> (
      myPrint("binop ");
      case evalList(c, {e1, e2}) of 
        [c, {Value(res1), Value(res2)}] -> [c, Value(evalOp(s, res1, res2))] 
      esac
    )
  | Read(s) -> (
      myPrint("read ");
      case readWorld(c.snd) of [i, w] -> [[c.fst <- [s, i], w], Void] esac
    )
  | Write(e) -> (
      myPrint("write ");
      case eval(c, e) of [c, Value(res)] -> [[c.fst, writeWorld(res, c.snd)], Void] esac
    )
  | Ignore(e) -> (
      myPrint("ignore ");
      case eval(c, e) of [c, _] -> [c, Void] esac
    )
  | Skip -> [c, Void]
  | Ref(s) -> (myPrint("ref "); [c, Refer(s)])
  | Var(s) -> (myPrint("var "); [c, Value((c.fst)(s))])
  | Seq(e1, e2) -> (
      myPrint("seq ");
      case evalList(c, {e1, e2}) of
        [c, {Void,res}] -> [c, res]
      esac
    )
  | Const(i) -> (myPrint("const "); [c, Value(i)])
  | While(eCond, eStmt) -> (
      case eval(c, eCond) of
        [c, Value(res)] -> if res 
                           then eval(eval(c, eStmt).fst, While(eCond, eStmt))
                           else [c, Void]
                           fi
      esac
    )
  | DoWhile(eCond, eStmt) -> (
      case eval(c, eStmt) of
        [c, Void] -> eval(c, While(eCond, eStmt))
      esac
    )
  | If(eCond, e1, e2) -> (
      case eval(c, eCond) of
        [c, Value(res)] -> if res
                           then eval(c, e1)
                           else eval(c, e2)
                           fi
      esac
    )
  | Assn(e1, e2) -> (
      myPrint("assn ");
      case evalList(c, {e1, e2}) of
        [c, {Refer(s),Value(i)}] -> [[c.fst <- [s, i], c.snd], Value(i)]
      esac
    )
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
