-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, 0)}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}


fun addVariables(ds, state) {
  case ds of
    {} -> state |
    Var(d):ds -> addVariables(ds, addNames(state, d)) |
    Fun(nm, ag, bd):ds -> addVariables(ds, addFunction(state, nm, ag, bd))
  esac
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalTwo(c, e1, e2) {
  case eval(c, e1) of
    [c, res1] -> 
      case eval(c, e2) of
        [c, res2] -> [c, res1, res2]
      esac
  esac
}

fun myPrint(s) {
  printf(s)
}

fun zipArgs(state, ags, agsExp) {
  case [ags, agsExp] of
    [{}, {}] -> state
  | [ag:ags, agVal:agsExp] ->
      zipArgs(addName(state, ag, agVal), ags, agsExp)
  | _ -> failure("different number of args ")
  esac
}

public fun getCollection(col, index) {
  case col of
    Sexp(_, arr) -> arr[index]
  | _ -> col[index]
  esac
}

public fun setCol(col, index, value) {
  case col of
    Sexp(_, arr) -> arr[index] := value
  | _ -> col[index] := value
  esac
}

fun eval (c@[state, world], expr) {
  case expr of
    Binop(s, e1, e2) ->
      case eval(c, e1) of 
        [c, res1] ->
          case eval(c, e2) of
            [c, res2] -> [c, evalOp(s, res1, res2)]
          esac 
      esac
  | Ignore(e) ->
      [eval(c, e)[0], 0]
  | Skip -> [c, 0]
  | Ref(s) ->
      [c, s]
  | Var(s) ->
      [c, lookup(state, s)]
  | Seq(e1, e2) -> eval(eval(c, e1)[0], e2)
  | Call(nm, agsExp) ->
      case lookup(state, nm) of
        Fun(_, External) ->
          case evalList(c, agsExp) of
            [c, agsExp] ->
                case evalBuiltin(nm, agsExp, c[1]) of
                  [res, w] -> [[c[0], w], res]
                esac
          esac
      | Fun(ags, bd) ->
          case evalList(c, agsExp) of
            [c, agsExp] ->
              case eval([zipArgs(enterFunction(state), ags, agsExp), world], bd) of
                              [[state, world], res] ->
                                [[leaveFunction(c[0], getGlobal(state)), world], res]
              esac
          esac
      esac
  | Scope(ds, e) ->
      case addVariables(ds, enterScope(state)) of
        state ->
          case eval([if isGlobal(state) then state.addName ("read",   Fun ({}, External))
                                                  .addName ("write",  Fun ({"a"}, External))
                                                  .addName ("length", Fun ({"a"}, External)) else state fi, world], e) of
            [[state, w], res] -> [[leaveScope(state), w], res]
          esac
      esac
  | Const(i) -> [c, i]
  | While(eCond, eStmt) ->
      case eval(c, eCond) of
        [c, res] -> if res 
                    then eval(eval(c, eStmt)[0], While(eCond, eStmt))
                    else [c, 0]
                    fi
      esac
  | DoWhile(eCond, eStmt) ->
      eval(eval(c, eStmt)[0], While(eCond, eStmt))
  | If(eCond, e1, e2) ->
      case eval(c, eCond) of
        res ->      if res[1]
                    then eval(res[0], e1)
                    else eval(res[0], e2)
                    fi
      esac
  | Assn(e1, e2) -> 
      case evalTwo(c, e1, e2) of
        [c, ElemRef(coll, index), i] -> setCol(coll, index, i); [c, i]
      | [c, s, i] -> [[c[0] <- [s, i], c[1]], i]
      esac
  | Array(ls) ->
      case evalList(c, ls) of
        [c, evaled] -> [c, listArray(evaled)]
      esac
  | Elem(eCol, eIndex) ->
      case evalTwo(c, eCol, eIndex) of
        [c, col, index] -> [c, getCollection(col, index)]
      esac
  | ElemRef(eColl, eIndex) ->
      case evalTwo(c, eColl, eIndex) of
        [c, coll, index] -> [c, ElemRef(coll, index)]
      esac
  | String(s) -> [c, s]
  | Sexp(nm, ls) ->
      case evalList(c, ls) of
        [c, evaled] -> [c, Sexp(nm, listArray(evaled))]
      esac

  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  fwrite("lg.txt", "session_opened");
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

