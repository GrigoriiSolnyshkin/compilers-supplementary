-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Scope   (definitions, expr)  |
--        Ignore  (expr)

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var(0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}


fun addVariables(ds, state) {
  case ds of
    {} -> state |
    Var(d):ds -> addVariables(ds, addNames(state, d)) |
    Fun(nm, ag, bd):ds -> addVariables(ds, addFunction(state, nm, ag, bd))
  esac
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun zipArgs(state, ags, agsExp) {
  case [ags, agsExp] of
    [{}, {}] -> state
  | [ag:ags, agVal:agsExp] ->
      zipArgs(addName(state, ag, Var(agVal)), ags, agsExp)
  esac
}

fun eval (c@[state, world], expr) {
  case expr of
    Binop(s, e1, e2) ->
      case evalList(c, {e1, e2}) of 
        [c, {res1, res2}] -> [c, evalOp(s, res1, res2)] 
      esac
  | Assn(e1, e2) -> 
      case evalList(c, {e1, e2}) of
        [c, {s, i}] -> [[c[0] <- [s, Var(i)], c[1]], i]
      esac
  | Ignore(e) ->
      [eval(c, e)[0], Void]
  | Skip -> [c, Void]
  | Ref(s) ->
      [c, s]
  | Var(s) ->
      [c, case lookup(state, s) of Var(x) -> x esac]
  | Seq(e1, e2) ->
      case evalList(c, {e1, e2}) of
        [c, {_, res}] -> [c, res]
      esac
  | Scope(ds, e) ->
      case eval([addVariables(ds, enterScope(state)), world], e) of
        [[state, w], res] -> [[leaveScope(state), w], res]
      esac
  | Call(nm, agsExp) ->
      var f = lookup(state, nm);
      case evalList(c, agsExp) of
        [c, agsExp] -> 
          case eval([zipArgs(enterFunction(state), f[0], agsExp), world], f[1]) of
            [[state, world], res] ->
              [[leaveFunction(c[0], getGlobal(state)), world], res]
          esac
      esac
  | Const(i) -> [c, i]
  | While(eCond, eStmt) ->
      case eval(c, eCond) of
        [c, res] -> if res 
                    then eval(eval(c, eStmt)[0], While(eCond, eStmt))
                    else [c, Void]
                    fi
      esac
  | DoWhile(eCond, eStmt) ->
      case eval(c, eStmt) of
        [c, Void] -> eval(c, While(eCond, eStmt))
      esac
  | If(eCond, e1, e2) ->
      case eval(c, eCond) of
        [c, res] -> if res
                    then eval(c, e1)
                    else eval(c, e2)
                    fi
      esac
  | Read(s) ->
      case readWorld(world) of [i, w] -> [[state <- [s, Var(i)], w], Void] esac
  | Write(e) ->
      case eval(c, e) of
        [[state, world], res] -> [[state, writeWorld(res, world)], Void]
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, rs] -> c[1].getOutput
  esac
}