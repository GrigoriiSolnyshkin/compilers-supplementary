-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg,  lc) {
  failure ("%s at %d:%d\n", msg,  lc.fst,  lc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v,  lc) {
  case atr of
    Ref  -> error ("reference expected",  lc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v,  lc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected",  lc)
  | _    -> error ("reference expected",  lc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l,  lc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)),  lc)
                          }
                        }
  ]
}


var ifExpr = memo $ eta syntax (
      eCon=exp kThen e1=exp kElse e2=exp {fun(a){If(eCon(Val), e1(a), e2(a))}} |
      lc=pos eCon=exp kThen e=exp {fun(a){assertVoid(a, If(eCon(Val), e(a), Skip), lc)}} |
      eCon=exp kThen e1=exp kElif e2=ifExpr {fun(a){If(eCon(Val), e1(a), e2(a))}}
),
    primary  = memo $ eta syntax (
                                  -- decimal constant
      lc=pos x=decimal   {fun (a) {assertValue (a, Const (stringInt (x)),  lc)}}     |

      -- identifier
      x=lident            {fun (a) {
                              case a of
                                Ref  -> Ref (x)
                              | Void -> Ignore (Var (x))
                              | _    -> Var (x)
                              esac
                          }} |
      lc=pos kIf ifBody=ifExpr kFi {fun(a){
                                     ifBody(a)
                                   }} |
      lc=pos kRead st=inbr[s("("), lident, s(")")] {fun(a) {
                                                      assertVoid(a, Read(st),  lc)
                                                    }} |
      lc=pos kWrite e=inbr[s("("), exp, s(")")] {fun(a){
                                                    assertVoid(a, Write(e(Val)),  lc)
                                                  }} |
      lc=pos kSkip {fun(a){
                      assertVoid(a, Skip,  lc)
                    }} |
      e=inbr[s("("), exp, s(")")] {fun(a){
                                    e(a)
                                  }} |
      lc=pos kDo eSt=exp kWhile eCon=exp kOd {fun(a) {
                                                assertVoid(a, DoWhile(eCon(Val), eSt(Void)),  lc)
                                              }} |
      lc=pos kWhile eCon=exp kDo eSt=exp kOd {fun(a){
                                                assertVoid(a, While(eCon(Val), eSt(Void)),  lc)
                                              }} |
      lc=pos kFor e1=exp s[","] e2=exp s[","] e3=exp kDo e=exp kOd {fun(a){
                                                                      assertVoid(
                                                                        a,
                                                                        Seq(
                                                                          e1(Void), 
                                                                          While(
                                                                            e2(Val),
                                                                            Seq(
                                                                              e(Void),
                                                                              e3(Void)
                                                                            )
                                                                          )
                                                                        ),
                                                                        lc
                                                                      )
                                                                    }}
),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l,  lc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)),  lc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (e=exp {e(Void)});
