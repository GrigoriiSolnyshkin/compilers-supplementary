-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg,  lc) {
  failure ("%s at %d:%d\n", msg,  lc.fst,  lc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v,  lc) {
  case atr of
    Ref  -> error ("reference expected",  lc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (v, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l,  lc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)),  lc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

fun simplify(e) {
  case e of
    scope@Scope(defs, expr) -> case defs of {} -> expr | _ -> scope esac
  | _ -> e
  esac
}

var singleDef = memo $ eta syntax (
    x=lident {[x, None]}
  | x=lident s["="] y=basic {[x, Some(y(Val))]}
), rawDef = memo $ eta syntax (
    kVar rs=list[singleDef] s[";"] {Var(rs)} |
    rs=funcDef {rs}
), allDef = memo $ eta syntax (
    rs=rep0[rawDef] {rs}
), funcDef = memo $ eta syntax(
    kFun nm=lident s["("] ag=list0[lident] s[")"] s["{"] bd=scopeExpr s["}"]
      {
        Fun(nm, ag, bd(Weak))
      }
);

var scopeExpr = memo $ eta syntax (
    d=allDef e=exp {fun(a) {
                      expandScope(d, e(a))
                    }}
),  ifExpr = memo $ eta syntax (
      eCon=exp kThen e1=scopeExpr kElse e2=scopeExpr
        {fun(a){
          If(eCon(Val), simplify(e1(a)), simplify(e2(a)))
        }} |
      eCon=exp kThen e=scopeExpr 
        {fun(a){
          case a of
            Void -> If(eCon(Val), simplify(e(a)), Skip)
          | Weak -> If(eCon(Val), simplify(e(a)), Const(0))
          | _ -> failure("one branch if fail ")
          esac
        }} |
      eCon=exp kThen e1=scopeExpr kElif e2=ifExpr
        {fun(a){
          If(eCon(Val), simplify(e1(a)), e2(a))
        }}
),  primary  = memo $ eta syntax (
                                  -- decimal constant
      lc=pos x=decimal   {fun (a) {assertValue (a, Const (stringInt (x)),  lc)}}     |

      -- identifier
      x=lident            {fun (a) {
                              case a of
                                Ref  -> Ref (x)
                              | Void -> Ignore (Var (x))
                              | _    -> Var (x)
                              esac
                          }} |
      lc=pos kIf ifBody=ifExpr kFi {fun(a){
                                     ifBody(a)
                                   }} |
      lc=pos kRead st=inbr[s("("), lident, s(")")] {fun(a) {
                                                      assertVoid(a, Read(st),  lc)
                                                    }} |
      lc=pos kWrite e=inbr[s("("), exp, s(")")] {fun(a){
                                                    assertVoid(a, Write(e(Val)),  lc)
                                                }} |
      lc=pos kSkip {fun(a){
                      assertVoid(a, Skip,  lc)
                    }} |
      e=inbr[s("("), scopeExpr, s(")")] {fun(a){
                                          e(a)
                                        }} |
      lc=pos nm=lident agsExp=inbr[s("("), list0(exp), s(")")] { fun(a) {
        assertValue(a, Call(nm, map(fun(agExp) {agExp(Val)}, agsExp)), lc)
      }} |
      lc=pos kDo eSt=scopeExpr kWhile eCon=exp kOd 
        {fun(a) {
          assertVoid(
            a,
            case eSt(Void) of
              Scope(ds, eCycle) -> Scope(ds, DoWhile(eCon(Val), eCycle))
            esac,
            lc
          )
        }} |
      lc=pos kWhile eCon=scopeExpr kDo eSt=scopeExpr kOd 
        {fun(a){
          assertVoid(
            a,
            case eCon(Val) of
              Scope(ds, eInit) -> Scope(ds, While(eInit, eSt(Void)))
            esac,
            lc
          )
        }} |
      lc=pos kFor e1=scopeExpr s[","] e2=exp s[","] e3=exp kDo e=scopeExpr kOd 
        {fun(a){
          assertVoid(
            a,
            case e1(Void) of Scope(ds, eInit) ->
              Scope(
                ds,
                Seq(
                  eInit, 
                  While(
                    e2(Val),
                    Seq(
                      e(Void),
                      e3(Void)
                    )
                  )
                )
              )
            esac,
            lc
          )
        }}
),  basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l,  lc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)),  lc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = memo $ eta syntax (sc=scopeExpr {sc(Void)});
