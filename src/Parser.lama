-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}



fun stropToBinop(l, op, r) {
  Binop(op, l, r)
}



var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
        {
          [Left, {(token("+") | token("-")), stropToBinop}],
          [Left, {(token("*") | token("/")), stropToBinop}],
          primary
        }
      );


var sngl = memo $ eta syntax (
  kRead x=inbr[s("("), lident, s(")")] {Read(Var(x))}  |
  kWrite x=inbr[s("("), exp, s(")")] {Write(x)}        |
  kSkip {Skip}                                         |
  x=lident s["="] v=exp {Assn(x, v)}
);
var stmt = memo $ eta syntax (sngl | le=sngl s[";"] ri=stmt {Seq(le, ri)});

-- Public top-level parser
public parse = stmt;
             
