-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
      Seq(s1, s2) -> (
        eval(eval(c, s1), s2)
      )
    | Write(e) -> (
        [c.fst, writeWorld(evalExpr(c.fst, e), c.snd)]
      )
    | Skip -> c
    | Assn(s, e) -> (
        [c.fst <- [s, evalExpr(c.fst, e)], c.snd]
      )
    | Read(s) -> (
        var rw;
        rw := readWorld(c.snd);
        [c.fst <- [s, rw.fst], rw.snd]
      )
    | If(e, s1, s2) -> (
        if evalExpr(c.fst, e) then eval(c, s1) else eval(c, s2) fi
      )
    | While(e, s) -> (
        if evalExpr(c.fst, e) then eval(eval(c, s), While(e, s)) else c fi
      )
    | DoWhile(s, e) -> (
        eval(eval(c, s), While(e, s))
      )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
